{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","className","this","props","title","React","Component","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Card","id","name","email","alt","src","CardList","robots","map","user","i","ErrorBoundry","state","hasError","error","info","setState","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CHANGE_SEARCH_FIELD","connect","requestRobots","isPending","searchField","searchRobots","dispatch","onRequestRobots","fetch","then","response","json","data","payload","catch","onSearchChange","event","text","target","value","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateRobots","initialStateSearch","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.37751c8b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className='f1'>{this.props.title}</h1>\n  }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots' \n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots img' src={`https://robohash.org/${id}?size=200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={robots[i].id} \n              id={robots[i].id} \n              name={robots[i].name} \n              email={robots[i].email} \n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops sorry something went wrong</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nfunction App(props) {\n  const { onRequestRobots, robots, isPending, searchField, onSearchChange } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots])\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  })\n  return (\n    <div className='tc'>\n      <Header title={'Robofriends'} />\n      <SearchBox searchChange={onSearchChange} />\n      {isPending\n        ? <h1>Loading</h1>\n        : <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n    searchField: state.searchRobots.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRequestRobots: () => dispatch(requestRobots()),\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  CHANGE_SEARCH_FIELD \n} from './constants';\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.cypress.io/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  CHANGE_SEARCH_FIELD \n} from './constants';\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload , isPending: false })\n    default:\n      return state\n  }\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField:action.payload});\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ requestRobots, searchRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}